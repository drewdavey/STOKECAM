
.. _program_listing_file_documentation__DataExport_CLI_Exporter.hpp:

Program Listing for File CLI_Exporter.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__DataExport_CLI_Exporter.hpp>` (``documentation\_DataExport\CLI_Exporter.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef __CLI_EXPORTER_HPP__
   #define __CLI_EXPORTER_HPP__
   
   #pragma managed(push, off)
   #include "Exporter.hpp"
   #include "ExporterAscii.hpp"
   #include "ExporterCsv.hpp"
   //#include "ExporterImr.hpp" // Not fully working yet
   //#include "ExporterRinex.hpp" // Needs GNSS Raw Measurements
   #include "FileExporter.hpp"
   #pragma managed(pop)
   
   using namespace System;
   
   namespace VNSDK
   {
   
        class Exporter
       {
       protected:
           VN::Exporter *_exporter;
           VN::Filesystem::FilePath* _filePath;
   
       public:
           Exporter(String* filePath)
           {
               marshal_context* context = gcnew marshal_context();
               _filePath = new VN::Filesystem::FilePath(context->marshal_as<const char*>(filePath));
               delete context;
           }
   
           virtual ~Exporter()
           {
               if (_exporter != nullptr)
               {
                   delete _exporter;
               }
   
               delete _filePath;
           };
   
           VN::Exporter* GetRawExporter()
           {
               return _exporter;
           }
   
           VN::PacketQueue_Interface* GetQueuePointer()
           {
               return _exporter->getQueuePtr();
           }
   
           bool Start()
           {
               return _exporter->start();
           }
   
           void Stop()
           {
               _exporter->stop();
           }
   
           bool IsLogging()
           {
               return _exporter->isLogging();
           }
   
           void ExportToFile()
           {
               _exporter->exportToFile();
           }
   
           virtual void FinalizeFile()
           {
           }
   
       };
   
        class ExporterAscii : Exporter
       {
           public:
           
           ExporterAscii(String *filePath) : Exporter(filePath)
           {
               _exporter = new VN::ExporterAscii(*_filePath);
           }
   
       }; //  class ExporterAscii
   
        class ExporterCsv : Exporter
       {
       public:
           
           ExporterCsv(String* filePath) : Exporter(filePath)
           {
               _exporter = new VN::ExporterCsv(*_filePath, false);
           }
   
           ExporterCsv(String* filePath, bool enableSystemTimeStamps) : Exporter(filePath)
           {
               _exporter = new VN::ExporterCsv(*_filePath, enableSystemTimeStamps);
           }
   
       }; //  class ExporterAscii
   
       // class ExporterImr : Exporter
       //{
       //public:
       //    
       //    ExporterImr(String *filePath) : Exporter(filePath)
       //    {
       //        _exporter = new VN::ExporterImr(*_filePath);
       //    }
   
       //    virtual void FinalizeFile() override
       //    {
       //        ((VN::ExporterImr *)_exporter)->finalize();
       //    }
   
       //}; //  class ExporterAscii
   
       // class ExporterRinex : Exporter
       //{
       //public:
       //    
       //    ExporterRinex(String *filePath, UInt32 gnssGroup) : Exporter(filePath)
       //    {
       //        _exporter = new VN::ExporterRinex(*_filePath, gnssGroup);
       //    }
   
       //}; //  class ExporterAscii
   
   
        class FileExporter
       {
       private:
           VN::FileExporter *_fileExporter = nullptr;
           VN::Filesystem::FilePath* _filePath;
   
       public:
           FileExporter()
           {
               _fileExporter = new VN::FileExporter();
           }
   
           ~FileExporter()
           {
               delete _fileExporter;
           }
   
           bool AddExporter(Exporter* exporter)
           {
               return _fileExporter->addExporter(std::unique_ptr<VN::Exporter>(exporter->GetRawExporter()));
           }
   
           bool ProcessFile(String* filePath)
           {
               marshal_context* context = gcnew marshal_context();
               _filePath = new VN::Filesystem::FilePath(context->marshal_as<const char*>(filePath));
               delete context;
   
               return _fileExporter->processFile(*_filePath);
           }
   
       };
   } // namespace VNSDK
   #endif // __CLI_EXPORTER_HPP__
