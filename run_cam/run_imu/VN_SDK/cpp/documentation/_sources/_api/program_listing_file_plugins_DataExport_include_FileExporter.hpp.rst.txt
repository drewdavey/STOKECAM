
.. _program_listing_file_plugins_DataExport_include_FileExporter.hpp:

Program Listing for File FileExporter.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_DataExport_include_FileExporter.hpp>` (``plugins\DataExport\include\FileExporter.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef FILE_EXPORTER_HPP
   #define FILE_EXPORTER_HPP
   
   #include <memory>
   #include <filesystem>
   
   #include "Exporter.hpp"
   #include "HAL/File.hpp"
   #include "TemplateLibrary/Vector.hpp"
   #include "Interface/Registers.hpp"
   #include "Implementation/PacketSynchronizer.hpp"
   #include "Implementation/AsciiPacketDispatcher.hpp"
   #include "Implementation/FaPacketDispatcher.hpp"
   #include "Implementation/FbPacketDispatcher.hpp"
   
   namespace VN
   {
   
   constexpr uint8_t EXPORTER_CAPACITY = 5;
   
   class FileExporter
   {
   public:
       FileExporter() = default;
   
       bool processFile(const Filesystem::FilePath& fileName)
       {
           const auto fileSizeInBytes = std::filesystem::file_size(fileName.c_str());
           auto buffer = std::make_unique<uint8_t[]>(fileSizeInBytes);
   
           InputFile inputFile(fileName);
   
           inputFile.read(reinterpret_cast<char*>(buffer.get()), fileSizeInBytes);
   
           ByteBuffer byteBuffer(buffer.get(), fileSizeInBytes, fileSizeInBytes);
   
           PacketSynchronizer packetSynchronizer(byteBuffer);
           packetSynchronizer.addDispatcher(&_asciiPacketDispatcher);
           packetSynchronizer.addDispatcher(&_faPacketDispatcher);
           packetSynchronizer.addDispatcher(&_fbPacketDispatcher);
   
           Registers::System::BinaryOutputMeasurements bor;
   
           for (auto& e : _exporters)
           {
               _faPacketDispatcher.addSubscriber(e->getQueuePtr(), bor.toBinaryHeader().toMeasurementHeader(), FaPacketDispatcher::SubscriberFilterType::AnyMatch);
               _asciiPacketDispatcher.addSubscriber(e->getQueuePtr(), "VN", AsciiPacketDispatcher::SubscriberFilterType::StartsWith);
   
               e->start();
           }
   
           while (!packetSynchronizer.dispatchNextPacket()) {};
   
           for (auto& e : _exporters) { e->stop(); }
           return false;
       }
   
       bool addExporter(std::unique_ptr<Exporter>&& exporterToAdd) { return _exporters.push_back(std::move(exporterToAdd)); };
   
   private:
       MeasurementQueue _measurementQueue{Config::PacketDispatchers::compositeDataQueueCapacity};
   
       CommandProcessor _commandProcessor{[]([[maybe_unused]] AsyncError&& error) {}};
   
       AsciiPacketDispatcher _asciiPacketDispatcher{&_measurementQueue, Config::PacketDispatchers::cdEnabledMeasTypes, &_commandProcessor};
   
       FaPacketDispatcher _faPacketDispatcher{&_measurementQueue, Config::PacketDispatchers::cdEnabledMeasTypes};
       FbPacketDispatcher _fbPacketDispatcher{&_faPacketDispatcher, Config::PacketFinders::fbBufferCapacity};
   
       Vector<std::unique_ptr<Exporter>, EXPORTER_CAPACITY> _exporters;
   };
   
   }  // namespace VN
   
   #endif  // FILE_EXPORTER_HPP
