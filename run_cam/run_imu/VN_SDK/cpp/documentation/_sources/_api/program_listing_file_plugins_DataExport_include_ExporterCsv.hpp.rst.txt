
.. _program_listing_file_plugins_DataExport_include_ExporterCsv.hpp:

Program Listing for File ExporterCsv.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_DataExport_include_ExporterCsv.hpp>` (``plugins\DataExport\include\ExporterCsv.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef FILES_EXPORT_CSV_HEADER_H
   #define FILES_EXPORT_CSV_HEADER_H
   
   #include <chrono>
   #include <string>
   #include <vector>
   #include <memory>
   #include <algorithm>
   
   #include "Exporter.hpp"
   #include "HAL/File.hpp"
   #include "HAL/Duration.hpp"
   #include "Implementation/Packet.hpp"
   #include "Implementation/BinaryHeader.hpp"
   #include "Implementation/FaPacketProtocol.hpp"
   #include "Implementation/QueueDefinitions.hpp"
   
   namespace VN
   {
   
   static std::string getMeasurementString(FaPacketExtractor& extractor, const std::pair<Type, uint8_t>& typeInfo);
   static const char* getMeasurementString(const AsciiHeader& msg);
   static std::string getMeasurementName(const size_t binaryGroup, const size_t binaryField);
   
   struct CsvInfo
   {
       PacketDetails details;
       OutputFile file;
   };
   
   class ExporterCsv : public Exporter
   {
   public:
       ExporterCsv(const Filesystem::FilePath& outputDir, bool enableSystemTimeStamps = false)
           : Exporter(2048), _filePath(outputDir), _enableSystemTimeStamps(enableSystemTimeStamps)
       {
           if (!_filePath.empty() && _filePath.to_string().back() != std::filesystem::path::preferred_separator)
           {
               _filePath = _filePath + std::filesystem::path::preferred_separator;
           }
       }
   
       ~ExporterCsv() {}
   
       void addPacketToProcess([[maybe_unused]] const std::shared_ptr<Packet> ptr) override
       {
           // _queue.push_back(ptr);
       }
   
       void exportToFile() override
       {
           while (!_queue.isEmpty())
           {
               const auto p = _queue.get();
               if (!p) { return; }
   
               std::string out;
               OutputFile& csv = getFileHandle(p.get());
   
               if (p->details.syncByte == PacketDetails::SyncByte::Ascii)
               {
                   if (_enableSystemTimeStamps)
                   {
                       out += std::to_string(std::chrono::duration_cast<Nanoseconds>(p->details.asciiMetadata.timestamp.time_since_epoch()).count()) + ",";
                       csv.write(out.c_str(), out.size());
                   }
   
                   const size_t begin = p->details.asciiMetadata.delimiterIndices.front() + 1;
                   const size_t end = p->details.asciiMetadata.delimiterIndices.back();
   
                   csv.write(reinterpret_cast<char*>(&p->buffer[begin]), end - begin);
                   csv.write("\n", 1);
               }
               else
               {
                   FaPacketExtractor extractor(p->buffer, p->details.faMetadata);
                   extractor.discard(p->details.faMetadata.header.size() + 1);
                   if (_enableSystemTimeStamps)
                   {
                       out += std::to_string(std::chrono::duration_cast<Nanoseconds>(p->details.faMetadata.timestamp.time_since_epoch()).count()) + ",";
                   }
   
                   BinaryHeaderIterator iter(p->details.faMetadata.header);
                   while (iter.next())
                   {
                       const auto typeInfo = dataTypes[iter.group()][iter.field()];
                       out += getMeasurementString(extractor, typeInfo);
                   }
   
                   out.back() = '\n';
                   csv.write(out.c_str(), out.size());
               }
           }
       }
   
   private:
       void init_csv(CsvInfo& csvInfo, const Packet* p)
       {
           std::string csvHeader;
   
           if (_enableSystemTimeStamps) { csvHeader += "systemTimeStamp,"; }
   
           if (csvInfo.details.syncByte == PacketDetails::SyncByte::Ascii)
           {
               csvHeader.append(getMeasurementString(csvInfo.details.asciiMetadata.header));
               csvHeader += ",";
   
               if (std::find(&p->buffer[7], &p->buffer[p->size], 'S') != &p->buffer[p->size]) { csvHeader += "appendStatus,"; }
   
               if (std::find(&p->buffer[7], &p->buffer[p->size], 'T') != &p->buffer[p->size]) { csvHeader += "appendCount,"; }
           }
           else
           {
               BinaryHeaderIterator iter(p->details.faMetadata.header);
               while (iter.next())
               {
                   std::string tmp = getMeasurementName(iter.group(), iter.field());
                   if (!tmp.empty()) csvHeader.append(tmp + ",");
               }
           }
   
           csvHeader.back() = '\n';
           csvInfo.file.write(csvHeader.c_str(), csvHeader.size());
       };
   
       OutputFile& getFileHandle(const Packet* p)
       {
           Filesystem::FilePath fileName;
           if (p->details.syncByte == PacketDetails::SyncByte::Ascii)
           {
               for (auto& tmp : _csvInfo)
               {
                   if (tmp.details.syncByte == PacketDetails::SyncByte::Ascii && p->details.asciiMetadata.header == tmp.details.asciiMetadata.header)
                   {
                       return tmp.file;
                   }
               }
               snprintf(fileName.begin(), fileName.capacity(), "%s%s.csv", _filePath.c_str(), p->details.asciiMetadata.header.c_str());
           }
           else
           {
               for (auto& tmp : _csvInfo)
               {
                   if (tmp.details.syncByte == PacketDetails::SyncByte::FA && p->details.faMetadata.header == tmp.details.faMetadata.header) { return tmp.file; }
               }
               snprintf(fileName.begin(), fileName.capacity(), "%sFA%s.csv", _filePath.c_str(), binaryHeaderToString<64>(p->details.faMetadata.header).c_str());
               std::replace(fileName.begin(), fileName.end(), ',', '_');
           }
   
           _csvInfo.emplace_back(CsvInfo{p->details, OutputFile(fileName)});
           // if we don't find the header we need to init a new csv
   
           init_csv(_csvInfo.back(), p);
   
           return _csvInfo.back().file;
       }
   
   private:
       Filesystem::FilePath _filePath;
       const bool _enableSystemTimeStamps = false;
   
       std::vector<CsvInfo> _csvInfo;
   };
   
   static std::string getMeasurementString(FaPacketExtractor& packet, const std::pair<Type, uint8_t>& typeInfo)
   {
       switch (typeInfo.first)
       {
           case U8:
           {
               return extractToString<uint8_t>(packet, typeInfo.second);
           }
           case U16:
           {
               return extractToString<uint16_t>(packet, typeInfo.second);
           }
           case U32:
           {
               return extractToString<uint32_t>(packet, typeInfo.second);
           }
           case U64:
           {
               return extractToString<uint64_t>(packet, typeInfo.second);
           }
           case FLO:
           {
               return extractToString<float>(packet, typeInfo.second);
           }
           case DUB:
           {
               return extractToString<double>(packet, typeInfo.second);
           }
           case UTC:
           {
               std::string out;
   
               out += extractToString<int8_t>(packet, 1);
               out += extractToString<uint8_t>(packet, 5);
               out += extractToString<uint16_t>(packet, 1);
   
               return out;
           }
           case SAT:
           {
               auto numSats = packet.extract_unchecked<uint8_t>();
   
               std::string out = extractToString<uint8_t>(packet, 1);
               packet.discard(1);
               for (auto i = 0; i < numSats; i++)
               {
                   out += extractToString<uint8_t>(packet, 6);
                   out += extractToString<uint16_t>(packet, 1);
               }
   
               for (auto i = 0; i < (SATELLITE_MAX_COUNT - numSats) * 7; i++) { out += "0,"; }
   
               return out;
           }
           case RAW:
           {
               std::string out = extractToString<double>(packet, 1);
   
               out += extractToString<uint16_t>(packet, 1);
   
               auto numSats = packet.extract_unchecked<uint8_t>();
   
               out += extractToString<uint8_t>(packet, 1);
               packet.discard(1);
   
               for (auto i = 0; i < numSats; i++)
               {
                   out += extractToString<uint8_t>(packet, 4);
                   out += extractToString<int8_t>(packet, 1);
                   out += extractToString<uint8_t>(packet, 1);
                   out += extractToString<uint16_t>(packet, 1);
                   out += extractToString<double>(packet, 2);
                   out += extractToString<float>(packet, 1);
               }
   
               for (auto i = 0; i < (SATELLITE_MAX_COUNT - numSats) * 10; i++) { out += "0,"; }
   
               return out;
           }
           case UNK:
           {
               packet.discard(typeInfo.second);
               return "";
           }
           default:
           {  // NON
               VN_ABORT();
           }
       };
   }
   
   static std::string getMeasurementName(const size_t binaryGroup, const size_t binaryField)
   {
       switch (binaryGroup)
       {
           case 0:
           {
               switch (binaryField)
               {
                   case 0:
                   {
                       return "timeStartup";
                   }
                   case 1:
                   {
                       return "timeGps";
                   }
                   case 2:
                   {
                       return "timeSyncIn";
                   }
                   case 3:
                   {
                       return "yaw,pitch,roll";
                   }
                   case 4:
                   {
                       return "quatX,quatY,quatZ,quatW";
                   }
                   case 5:
                   {
                       return "angularRateX,angularRateY,angularRateZ";
                   }
                   case 6:
                   {
                       return "lat,lon,alt";
                   }
                   case 7:
                   {
                       return "velNedX,velNedY,velNedZ";
                   }
                   case 8:
                   {
                       return "accelX,accelY,accelZ";
                   }
                   case 9:
                   {
                       return "uncompAccelX,uncompAccelY,uncompAccelZ"
                              "uncompGyroX,uncompGyroY,uncompGyroZ";
                   }
                   case 10:
                   {
                       return "magX,magY,magZ,pressure,temperature";
                   }
                   case 11:
                   {
                       return "deltaTime,deltaThetaX,deltaThetaY,deltaThetaZ"
                              "deltaVelX,deltaVelY,deltaVelZ";
                   }
                   case 12:
                   {
                       return "insStatus";
                   }
                   case 13:
                   {
                       return "syncInCnt";
                   }
                   case 14:
                   {
                       return "timeGpsPps";
                   }
                   default:
                   {
                       return "";
                   }
               }
           }
           case 1:
           {
               switch (binaryField)
               {
                   case 0:
                   {
                       return "timeStartup";
                   }
                   case 1:
                   {
                       return "timeGps";
                   }
                   case 2:
                   {
                       return "timeGpsTow";
                   }
                   case 3:
                   {
                       return "timeGpsWeek";
                   }
                   case 4:
                   {
                       return "timeSyncIn";
                   }
                   case 5:
                   {
                       return "timeGpsPps";
                   }
                   case 6:
                   {
                       return "utcYear,utcMonth,utcDay,utcHour,utcMinute,utcSecond,utcFracsec";
                   }
                   case 7:
                   {
                       return "syncInCnt";
                   }
                   case 8:
                   {
                       return "syncOutCnt";
                   }
                   case 9:
                   {
                       return "timeStatus";
                   }
                   default:
                   {
                       return "";
                   }
               }
           }
           case 2:
           {
               switch (binaryField)
               {
                   case 0:
                   {
                       return "imuStatus";
                   }
                   case 1:
                   {
                       return "uncompMagX,uncompMagY,uncompMagZ";
                   }
                   case 2:
                   {
                       return "uncompAccelX,uncompAccelY,uncompAccelZ";
                   }
                   case 3:
                   {
                       return "uncompGyroX,uncompGyroY,uncompGyroZ";
                   }
                   case 4:
                   {
                       return "temperature";
                   }
                   case 5:
                   {
                       return "pressure";
                   }
                   case 6:
                   {
                       return "deltaTime,deltaThetaX,deltaThetaY,deltaThetaZ";
                   }
                   case 7:
                   {
                       return "deltaVelX,deltaVelY,deltaVelZ";
                   }
                   case 8:
                   {
                       return "magX,magY,magZ";
                   }
                   case 9:
                   {
                       return "accelX,accelY,accelZ";
                   }
                   case 10:
                   {
                       return "angularRateX,angularRateY,angularRateZ";
                   }
                   case 11:
                   {
                       return "sensSat";
                   }
                   default:
                   {
                       return "";
                   }
               }
           }
           case 3:
           {
               switch (binaryField)
               {
                   case 0:
                   {
                       return "gps1UtcYear,gps1UtcMonth,gps1UtcDay,gps1UtcHour,gps1UtcMinute,gps1UtcSecond,gps1UtcFracsec";
                   }
                   case 1:
                   {
                       return "gps1Tow";
                   }
                   case 2:
                   {
                       return "gps1Week";
                   }
                   case 3:
                   {
                       return "gnss1NumSats";
                   }
                   case 4:
                   {
                       return "gnss1Fix";
                   }
                   case 5:
                   {
                       return "gnss1PosLat,gnss1PosLon,gnss1PosAlt";
                   }
                   case 6:
                   {
                       return "gnss1PosEcefX,gnss1PosEcefY,gnss1PosEcefY";
                   }
                   case 7:
                   {
                       return "gnss1VelNedX,gnss1VelNedY,gnss1VelNedZ";
                   }
                   case 8:
                   {
                       return "gnss1VelEcefX,gnss1VelEcefY,gnss1VelEcefZ";
                   }
                   case 9:
                   {
                       return "gnss1PosUncertaintyN,gnss1PosUncertaintyE,gnss1PosUncertaintyD";
                   }
                   case 10:
                   {
                       return "gnss1VelUncertainty";
                   }
                   case 11:
                   {
                       return "gnss1TimeUncertainty";
                   }
                   case 12:
                   {
                       return "gnss1TimeInfo";
                   }
                   case 13:
                   {
                       return "gnss1GDop,gnss1PDop,gnss1TDop,gnss1VDop,gnss1HDop,gnss1NDop,gnss1EDop";
                   }
                   case 14:
                   {
                       char buf[256];
                       std::string out = "satInfo1NumSats";
                       for (auto i = 0; i < SATELLITE_MAX_COUNT; i++)
                       {
                           std::snprintf(buf, sizeof(buf),
                                         ",satInfo1Sys_%d,satInfo1SvId_%d,satInfo1Flags_%d,satInfo1Cno_%d,satInfo1Qi_%d,satInfo1El_%d,"
                                         "satInfo1Az_%d",
                                         i, i, i, i, i, i, i);
                           out += std::string(buf);
                       }
                       return out;
                   }
                   case 16:
                   {
                       char buf[256];
                       std::string out = "rawMeas1Tow,rawMeas1Week,rawMeas1NumMeas";
                       for (auto i = 0; i < SATELLITE_MAX_COUNT; i++)
                       {
                           std::snprintf(buf, sizeof(buf),
                                         ",rawMeas1Sys_%d,rawMeas1SvId_%d,rawMeas1Band_%d,rawMeas1Chan_%d,rawMeas1FreqNum_%d,"
                                         "rawMeas1Cno_%d,rawMeas1Flags_%d,rawMeas1Pr_%d,rawMeas1Cp_%d,rawMeas1Dp_%d",
                                         i, i, i, i, i, i, i, i, i, i);
                           out += std::string(buf);
                       }
                       return out;
                   }
                   default:
                   {
                       return "";
                   }
               }
           }
           case 4:
           {
               switch (binaryField)
               {
                   case 0:
                   {
                       return "ahrsStatus";
                   }
                   case 1:
                   {
                       return "yaw,pitch,roll";
                   }
                   case 2:
                   {
                       return "quatX,quatY,quatZ,quatW";
                   }
                   case 3:
                   {
                       return "dcm00,dcm01,dcm02,dcm10,dcm11,dcm12,dcm20,dcm21,dcm22";
                   }
                   case 4:
                   {
                       return "magNedX,magNedY,magNedZ";
                   }
                   case 5:
                   {
                       return "accelNedX,accelNedY,accelNedZ";
                   }
                   case 6:
                   {
                       return "linBodyAccX,linBodyAccY,linBodyAccZ";
                   }
                   case 7:
                   {
                       return "linAccelNedX,linAccelNedY,linAccelNedZ";
                   }
                   case 8:
                   {
                       return "yawU,pitchU,rollU";
                   }
                   case 12:
                   {
                       return "heave,heaveRate,delayedHeave";
                   }
                   case 13:
                   {
                       return "attU";
                   }
                   default:
                   {
                       return "";
                   }
               }
           }
           case 5:
           {
               switch (binaryField)
               {
                   case 0:
                   {
                       return "insStatus";
                   }
                   case 1:
                   {
                       return "lat,lon,alt";
                   }
                   case 2:
                   {
                       return "posEcefX,posEcefY,posEcefZ";
                   }
                   case 3:
                   {
                       return "velBodyX,velBodyY,velBodyZ";
                   }
                   case 4:
                   {
                       return "velNedX,velNedY,velNedZ";
                   }
                   case 5:
                   {
                       return "velEcefX,velEcefY,velEcefZ";
                   }
                   case 6:
                   {
                       return "magEcefX,magEcefY,magEcefZ";
                   }
                   case 7:
                   {
                       return "accelEcefX,accelEcefY,accelEcefZ";
                   }
                   case 8:
                   {
                       return "linAccelEcefX,linAccelEcefY,linAccelEcefZ";
                   }
                   case 9:
                   {
                       return "posU";
                   }
                   case 10:
                   {
                       return "velU";
                   }
                   default:
                   {
                       return "";
                   }
               }
           }
           case 6:
           {
               switch (binaryField)
               {
                   case 0:
                   {
                       return "gps2UtcYear,gps2UtcMonth,gps2UtcDay,gps2UtcHour,gps2UtcMinute,gps2UtcSecond,gps2UtcFracsec";
                   }
                   case 1:
                   {
                       return "gps2Tow";
                   }
                   case 2:
                   {
                       return "gps2Week";
                   }
                   case 3:
                   {
                       return "gnss2NumSats";
                   }
                   case 4:
                   {
                       return "gnss2Fix";
                   }
                   case 5:
                   {
                       return "gnss2PosLat,gnss2PosLon,gnss2PosAlt";
                   }
                   case 6:
                   {
                       return "gnss2PosEcefX,gnss2PosEcefY,gnss2PosEcefY";
                   }
                   case 7:
                   {
                       return "gnss2VelNedX,gnss2VelNedY,gnss2VelNedZ";
                   }
                   case 8:
                   {
                       return "gnss2VelEcefX,gnss2VelEcefY,gnss2VelEcefZ";
                   }
                   case 9:
                   {
                       return "gnss2PosUncertaintyN,gnss2PosUncertaintyE,gnss2PosUncertaintyD";
                   }
                   case 10:
                   {
                       return "gnss2VelUncertainty";
                   }
                   case 11:
                   {
                       return "gnss2TimeUncertainty";
                   }
                   case 12:
                   {
                       return "gnss2TimeInfo";
                   }
                   case 13:
                   {
                       return "gnss2GDop,gnss2PDop,gnss2TDop,gnss2VDop,gnss2HDop,gnss2NDop,gnss2EDop";
                   }
                   case 14:
                   {
                       char buf[256];
                       std::string out = "satInfo2NumSats";
                       for (auto i = 0; i < SATELLITE_MAX_COUNT; i++)
                       {
                           std::snprintf(buf, sizeof(buf),
                                         ",satInfo2Sys_%d,satInfo2SvId_%d,satInfo2Flags_%d,satInfo2Cno_%d,satInfo2Qi_%d,satInfo2El_%d,"
                                         "satInfo2Az_%d",
                                         i, i, i, i, i, i, i);
                           out += std::string(buf);
                       }
                       return out;
                   }
                   case 16:
                   {
                       char buf[256];
                       std::string out = "rawMeas2Tow,rawMeas2Week,rawMeas2NumMeas";
                       for (auto i = 0; i < SATELLITE_MAX_COUNT; i++)
                       {
                           std::snprintf(buf, sizeof(buf),
                                         ",rawMeas2Sys_%d,rawMeas2SvId_%d,rawMeas2Band_%d,rawMeas2Chan_%d,rawMeas2FreqNum_%d,"
                                         "rawMeas2Cno_%d,rawMeas2Flags_%d,rawMeas2Pr_%d,rawMeas2Cp_%d,rawMeas2Dp_%d",
                                         i, i, i, i, i, i, i, i, i, i);
                           out += std::string(buf);
                       }
                       return out;
                   }
                   default:
                   {
                       return "";
                   }
               }
           }
           default:
           {
               VN_ABORT();
           }
       }
       VN_ABORT();
   }
   
   static const char* getMeasurementString(const AsciiHeader& msg)
   {
       if (StringUtils::startsWith(msg, "VNYPR")) { return "yaw,pitch,roll"; }
       else if (StringUtils::startsWith(msg, "VNQTN")) { return "quatX,quatY,quatZ,quatW"; }
       else if (StringUtils::startsWith(msg, "VNQMR"))
       {
           return "quatX,quatY,quatZ,quatW,magX,magY,magZ,accelX,accelY,accelZ,angularRateX,angularRateY,angularRateX";
       }
       else if (StringUtils::startsWith(msg, "VNMAG")) { return "magX,magY,magZ"; }
       else if (StringUtils::startsWith(msg, "VNACC")) { return "accelX,accelY,accelZ"; }
       else if (StringUtils::startsWith(msg, "VNGYR")) { return "angularRateX,angularRateY,angularRateX"; }
       else if (StringUtils::startsWith(msg, "VNMAR")) { return "magX,magY,magZ,accelX,accelY,accelZ,angularRateX,angularRateY,angularRateX"; }
       else if (StringUtils::startsWith(msg, "VNYMR")) { return "yaw,pitch,roll,magX,magY,magZ,accelX,accelY,accelZ,angularRateX,angularRateY,angularRateX"; }
       else if (StringUtils::startsWith(msg, "VNYBA"))
       {
           return "yaw,pitch,roll,linBodyAccelX,linBodyAccelY,linBodyAccelZ,angularRateX,angularRateY,angularRateX";
       }
       else if (StringUtils::startsWith(msg, "VNYIA")) { return "yaw,pitch,roll,linAccelNedX,linAccelNedY,linAccelNedZ,angularRateX,angularRateY,angularRateX"; }
       else if (StringUtils::startsWith(msg, "VNIMU"))
       {
           return "uncompMagX,uncompMagY,uncompMagZ,"
                  "uncompAccelX,uncompAccelY,uncompAccelZ,"
                  "uncompGyroX,uncompGyroY,uncompGyroZ,temperature,pressure";
       }
       else if (StringUtils::startsWith(msg, "VNGPS"))
       {
           return "gps1Tow,gps1Week,gnss1Fix,gnss1NumSats,"
                  "gnss1PosLat,gnss1PosLon,gnss1PosAlt,"
                  "gnss1VelN,gnss1VelE,gnss1VelD,"
                  "gnss1PosUncertaintyN,gnss1PosUncertaintyE,gnss1PosUncertaintyD,"
                  "gnss1VelUncertainty,gnss1TimeUncertainty";
       }
       else if (StringUtils::startsWith(msg, "VNGPE"))
       {
           return "gps1Tow,gps1Week,gnss1Fix,gnss1NumSats,"
                  "gnss1PosEcefX,gnss1PosEcefY,gnss1PosEcefZ,"
                  "gnss1VelEcefX,gnss1VelEcefY,gnss1VelEcefZ,"
                  "gnss1PosUncertaintyN,gnss1PosUncertaintyE,gnss1PosUncertaintyD,"
                  "gnss1VelUncertainty,gnss1TimeUncertainty";
       }
       else if (StringUtils::startsWith(msg, "VNINS"))
       {
           return "timeGpsTow,timeGpsWeek,insStatus,yaw,pitch,roll,"
                  "posLat,posLon,posAlt,velNedN,velNedE,velNedD,attU,posU,velU";
       }
       else if (StringUtils::startsWith(msg, "VNISE"))
       {
           return "timeGpsTow,timeGpsWeek,insStatus,yaw,pitch,roll,"
                  "posEcefX,posEcefY,posEcefZ,velEcefX,velEcefY,velEcefZ,attU,posU,velU";
       }
       else if (StringUtils::startsWith(msg, "VNISL"))
       {
           return "yaw,pitch,roll,posEcefX,posEcefY,posEcefZ,velEcefX,velEcefY,velEcefZ,"
                  "accelX,accelY,accelZ,angularRateX,angularRateY,angularRateZ";
       }
       else if (StringUtils::startsWith(msg, "VNDTV")) { return "deltaTime,deltaThetaX,deltaThetaY,deltaThetaZ,deltaVelX,deltaVelY,deltaVelZ"; }
       else if (StringUtils::startsWith(msg, "VNG2S"))
       {
           return "gps2Tow,gps2Week,gnss2Fix,gnss2NumSats,"
                  "gnss2PosLat,gnss2PosLon,gnss2PosAlt,"
                  "gnss2VelN,gnss2VelE,gnss2VelD,"
                  "gnss2PosUncertaintyN,gnss2PosUncertaintyE,gnss2PosUncertaintyD,"
                  "gnss2VelUncertainty,gnss2TimeUncertainty";
       }
       else if (StringUtils::startsWith(msg, "VNG2E"))
       {
           return "gps2Tow,gps2Week,gnss2Fix,gnss2NumSats,"
                  "gnss2PosLat,gnss2PosLon,gnss2PosAlt,"
                  "gnss2VelN,gnss2VelE,gnss2VelD,"
                  "gnss2PosUncertaintyN,gnss2PosUncertaintyE,gnss2PosUncertaintyD,"
                  "gnss2VelUncertainty,gnss2TimeUncertainty";
       }
       else if (StringUtils::startsWith(msg, "VNHVE")) { return "heave,heaveRate,delayedHeave"; }
       else { VN_ABORT(); }
   }
   
   }  // namespace VN
   
   #endif  // FILES_EXPORT_CSV_HEADER_H
