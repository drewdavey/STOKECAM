
.. _program_listing_file_documentation__include_CLI_MeasurementDatatypes.hpp:

Program Listing for File CLI_MeasurementDatatypes.hpp
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__include_CLI_MeasurementDatatypes.hpp>` (``documentation\_include\CLI_MeasurementDatatypes.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef CLI_MEASUREMENTDATATYPES_HPP
   #define CLI_MEASUREMENTDATATYPES_HPP
   
   #include "Implementation/MeasurementDatatypes.hpp"
   
   namespace VNSDK {
    struct Time {
       uint64_t nanoseconds() { return time; }
       uint64_t microseconds() { return time/(uint64_t)1e3; }
       uint64_t milliseconds() { return time/(uint64_t)1e6; }
       double seconds() { return (double)time / 1e9; }
       Time(const uint64_t other) : time(other){};
       Time(const double other) : time(other*1e9){};
   private:
       uint64_t time;
   };
   
    struct TimeStatus {
        bool towValid ;
       
        bool dateValid ;
       
        bool utcValid ;
       
        uint8_t value ;
       
       TimeStatus(const uint8_t& other): _value(other) {}
   private:
       uint8_t _value;
   };
   
    struct InsStatus {
        uint8_t mode ;;
       
        bool gnssFix ;;
       
        bool imuErr ;;
       
        bool magPressErr ;;
       
        bool gnssErr ;;
       
        uint8_t gnssCompassFix ;;
       
        uint16_t value ;;
       
       InsStatus(const uint16_t& other): _value(other) {}
   private:
       uint16_t _value;
   };
   
    struct ImuStatus {
        uint8_t gyroStatus ;;
       
        uint8_t accelStatus ;;
       
        uint8_t magStatus ;;
       
        uint8_t presTempStatus ;;
       
        uint16_t value ;;
       
       ImuStatus(const uint16_t& other): _value(other) {}
   private:
       uint16_t _value;
   };
   
    struct GnssStatus {
        bool enabled ;;
       
        bool operational ;;
       
        bool fix ;;
       
        bool antennaSignalError ;;
       
        bool usedForNav ;;
       
        uint8_t dataSource ;;
       
        bool usedForNavCurr ;;
       
        bool ppsUsedForTime ;;
       
        uint16_t value ;;
       
       GnssStatus(const uint16_t& other): _value(other) {}
   private:
       uint16_t _value;
   };
   
    struct AhrsStatus {
        uint8_t attitudeQuality ;;
       
        bool gyroSaturation ;;
       
        bool gyroSaturationRecovery ;;
       
        uint8_t magDistrubance ;;
       
        bool magSaturation ;;
       
        uint8_t accDisturbance ;;
       
        bool accSaturation ;;
   
        bool knownMagDisturbance ;;
   
        bool knownAccDisturbance ;;
       
        uint16_t value ;;
       
       AhrsStatus(const uint16_t& other): _value(other) {}
   private:
       uint16_t _value;
   };
   
    struct Vec3f {
       float x, y, z;
   
       Vec3f(const VN::Vec3f& other) : x(other[0]), y(other[1]), z(other[2]){};
   };
   
    struct Vec3d {
       double x, y, z;
   
       Vec3d(const VN::Vec3d& other) : x(other[0]), y(other[1]), z(other[2]){};
   };
   
    struct Ypr {
       float yaw, pitch, roll;
   
       Ypr(const VN::Ypr& other) : yaw(other.yaw), pitch(other.pitch), roll(other.roll) {}
   };
   
    struct DeltaTheta {
       DeltaTheta(const VN::DeltaTheta& other) : deltaTime(other.deltaTime), deltaTheta(other.deltaTheta) {}
       float deltaTime;
       Vec3f deltaTheta;
   };
   
    struct Quaternion
   {
       Quaternion(const VN::Quat& other) : vector(other.vector), scalar(other.scalar) {}
       Vec3f vector;
       float scalar;
   };
   
    struct Lla {
       double lat, lon, alt;
       Lla(const VN::Lla& other) : lat(other.lat), lon(other.lon), alt(other.alt) { }
       Lla(double lat, double lon, float alt) : lat(lat), lon(lon), alt(alt) {}
   };
   
    struct Mat3f {
       array<float> * data;
   
       Mat3f(const VN::Mat3f& other) : data(gcnew array<float>(9))
       {
           for (uint8_t i = 0; i < 9; i++) { data[i] = other[i]; }
       }
   };
   
    struct TimeUtc {
       int8_t year;
       uint8_t month;
       uint8_t day;
       uint8_t hour;
       uint8_t minute;
       uint8_t second;
       uint16_t fracSec;
   
       TimeUtc(const VN::TimeUtc& other)
           : year(other.year), month(other.month), day(other.day), hour(other.hour), minute(other.minute), second(other.second), fracSec(other.fracSec){};
   };
   
    struct GnssTimeInfo {
       uint8_t gnssTimeStatus;
       int8_t leapSeconds;
   
       GnssTimeInfo(const VN::GnssTimeInfo& other) : gnssTimeStatus(other.gnssTimeStatus), leapSeconds(other.leapSeconds){};
   };
   
    struct GnssDop {
       float gDop, pDop, tDop, vDop, hDop, nDop, eDop;
   
       GnssDop(const VN::GnssDop& other)
           : gDop(other.gDop), pDop(other.pDop), tDop(other.tDop), vDop(other.vDop), hDop(other.hDop), nDop(other.nDop), eDop(other.eDop){};
   };
   
   constexpr uint8_t SATELLITE_MAX_COUNT = 50;
   
    struct GnssSatInfo {
       uint8_t numSats;
       uint8_t resv;
       array<uint8_t> * sys;
       array<uint8_t> * svId;
       array<uint8_t> * flags;
       array<uint8_t> * cno;
       array<uint8_t> * qi;
       array<int8_t> * el;
       array<int16_t> * az;
   
       GnssSatInfo(const VN::GnssSatInfo& other)
           : numSats(other.numSats),
             resv(other.resv),
             sys(gcnew array<uint8_t>(numSats)),
             svId(gcnew array<uint8_t>(numSats)),
             flags(gcnew array<uint8_t>(numSats)),
             cno(gcnew array<uint8_t>(numSats)),
             qi(gcnew array<uint8_t>(numSats)),
             el(gcnew array<int8_t>(numSats)),
             az(gcnew array<int16_t>(numSats)) {
           for (uint8_t i = 0; i < numSats; ++i) {
               sys[i] = other.sys[i];
               svId[i] = other.svId[i];
               flags[i] = other.flags[i];
               cno[i] = other.cno[i];
               qi[i] = other.qi[i];
               el[i] = other.el[i];
               az[i] = other.az[i];
           }
       }
   };
   
    struct GnssRawMeas {
       double tow;
       uint16_t week;
       uint8_t numMeas;
       uint8_t resv;
       array<uint8_t> * sys;
       array<uint8_t> * svId;
       array<uint8_t> * band;
       array<uint8_t> * chan;
       array<int8_t> * freqNum;
       array<uint8_t> * cno;
       array<uint16_t> * flags;
       array<double> * pr;
       array<double> * cp;
       array<float> * dp;
   
       GnssRawMeas(const VN::GnssRawMeas& other)
           : tow(other.tow),
             week(other.week),
             numMeas(other.numMeas),
             resv(other.resv),
             sys(gcnew array<uint8_t>(other.numMeas)),
             svId(gcnew array<uint8_t>(other.numMeas)),
             band(gcnew array<uint8_t>(other.numMeas)),
             chan(gcnew array<uint8_t>(other.numMeas)),
             freqNum(gcnew array<int8_t>(other.numMeas)),
             cno(gcnew array<uint8_t>(other.numMeas)),
             flags(gcnew array<uint16_t>(other.numMeas)),
             pr(gcnew array<double>(other.numMeas)),
             cp(gcnew array<double>(other.numMeas)),
             dp(gcnew array<float>(other.numMeas)) {
           for (size_t i = 0; i < other.numMeas; ++i) {
               sys[i] = other.sys[i];
               svId[i] = other.svId[i];
               band[i] = other.band[i];
               chan[i] = other.chan[i];
               freqNum[i] = other.freqNum[i];
               cno[i] = other.cno[i];
               flags[i] = other.flags[i];
               pr[i] = other.pr[i];
               cp[i] = other.cp[i];
               dp[i] = other.dp[i];
           }
       }
   };
   
   }  // namespace VNSDK
   
   #endif  // CLI_MEASUREMENTDATATYPES_HPP
