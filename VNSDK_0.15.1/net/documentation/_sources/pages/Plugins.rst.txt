Plugins
#######

Data Export
===========

:class:`VNSDK::Exporter`

:class:`VNSDK::ExporterAscii`

:class:`VNSDK::ExporterCsv`

:class:`VNSDK::FileExporter`

Simple Logger
=============

:class:`VNSDK::SimpleLogger`

Register Scan
=============

:class:`VNSDK::SensorConfigurator`
Firmware Update
===============
The Firmware Update plugin houses everything necessary to update the firmware on a VectorNav unit. For most use cases, this ought to be a single call to the :func:`VNSDK::FirmwareUpdater::UpdateFirmware` method. 

The method is overloaded to accept either a .vnx file using 

.. .. doxygenfunction:: void VNSDK::FirmwareUpdater::UpdateFirmware(String navPath, String gnssPath, String imuPath)
.. code-block:: c#

    void VNSDK::FirmwareUpdater::UpdateFirmware(String navPath, String gnssPath, String imuPath)

or a .vnxml file using

.. .. doxygenfunction:: void VNSDK::FirmwareUpdater::UpdateFirmware(String vnxmlPath)
.. code-block:: c#

    void VNSDK::FirmwareUpdater::UpdateFirmware(String vnxmlPath)

The plugin will work with any sensor that accepts the :class:`VNSDK::SetBootLoader` command.


Usage
-----

As demonstrated in the Firmwre Update example, to use the Firmware Update plugin we must create our ``Sensor`` object, connect to it, and create our ``FirmwareUpdater`` object.

.. code-block:: c#

    Sensor sensor;
    sensor.autoConnect(PortName);
    FirmwareUpdater firmwareUpdater;

In most cases we will use a vnxml file, so we can create our file path to be uploaded as a String and pass it to our `UpdateFirmware` method. The path can be either relative or absolute. 

.. code-block:: c#

    String pathToUpload = "./VN100Firmware.vnxml";
    firmwareUpdater.UpdateFirmware(pathToUpload);

Alternatively, we may need to use individual vnx files. These can be used, and the order specified, using the other overload of the `UpdateFirmware` method.

.. code-block:: c#

    String navPathToUpload = "./VN310NavFirmware.vnx";
    String gnssPathToUpload = "./VN310GnssFirmware.vnx";
    String imuPathToUpload = "./VN310IMUFirmware.vnx";
    firmwareUpdater.UpdateFirmware(navPathToUpload, gnssPathToUpload, imuPathToUpload);

The example can be run as a command-line executable, which can be used as:

.. .. literalinclude:: ../../cs/Examples/FirmwareUpdate/FirmwareUpdate.cs
..    :linenos:
..    :lineno-match:
..    :language: c++
..    :start-after: usage
..    :end-at: ;
..    :caption: Firmware Update Example Command Line Usage (CS/Examples/FirmwareUpdate/FirmwareUpdate.cs)

.. For example, the command line can be used as

.. code-block::

    >> ./firmwareUpdate.exe --PortName=COM8 --Nav=./VN310NavFirmware.vnx --Imu=./VN310IMUFirmware.vnx --Gnss=./VN310GnssFirmware.vnx --bootloaderBaudRate=460800

which would connect to the sensor using the port COM8 at default 115200 bps, upload the selected nav firmware file, then the IMU firmware file, then the GNSS firmware file. Each firmware update would occur at 460800 bps.

.. warning::
    As a part of the firmware update, this plugin will issue a Restore Factory Settings. To ensure preservation of configuration settings, it is recommended to perform a register scan before updating the firmware version.

.. note::
    To speed up the firmware update, the bootloader can be set to update at higher rates using the ``bootloaderBaudRate`` parameter.
