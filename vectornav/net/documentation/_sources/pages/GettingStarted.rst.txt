Getting Started
###############

MATLAB
======

Requirements
************
* Matlab >= 2018b
* Windows OS

Installation
************

To build and install the VectorNav MATLAB library, download and install MATLAB from the `Mathworks website. <https://www.mathworks.com/help/install/ug/install-products-with-internet-connection.html>`_:

The VnSdk_Net.dll file is distributed in `/net`. To use the dll, you must import that file into your MATLAB instance using 

.. code-block:: matlab

    NET.addAssembly(VnDotNetAssemblyPath);

All of the values in the assembly are nested in the `VNSDK` namespace. You then must import the namespace `VNSDK` which also strips the namespace qualifier.

.. code-block:: matlab

    import VNSDK.*

The namespace importing is scope-tied, so it must be called each new function. 

Run the Getting Started Example
*******************************

The best way to validate the installation is by running the GettingStarted example. To do so, open the **GettingStarted.m** file in the /matlab/examples/ directory, update the COM port for the connected sensor, and run the script. The VectorNav USB adapter will show up in Windows as COMXX where XX is the COM port number.


.. tip::
    Registers use enumerations rather than raw integers. A list of available enumerations is available upon importing the library using

    .. code-block:: matlab

        vnSdkAssembly = NET.addAssembly(VnDotNetAssemblyPath);
        disp(vnSdkAssembly.Enums);

    An enum is accessed via `('ClassName+EnumName')` inside the correct namespace. For example, for the `HeadingMode` enum inside the `VpeBasicControl` class (Defined in :class:`VNSDK::Registers::Attitude::VpeBasicControl`) can be accessed via

    .. code-block:: matlab

        VNSDK.Regsiters.Attitude.('VpeBasicControl+HeadingMode').Absolute

    Getting the enums available from an imported enum class is not intuitive in Matlab. To make this easier, the SDK provides a utility to get the available enums, called `getEnumNames`, inside the ``matlab/Examples/GettingStarted`` folder. The following code block details how to extract the possible enums and list their names.

    .. code-block:: matlab

        enumType = vnSdkAssembly.Assemblyhandle.GetType();

        allNames = System.Enum.GetNames(enumType); 
        
    By looking at the list present in `allNames`, we can find the name of the enum class in which we are interested. Supposing we are interested in `VpeBasicControl+HeadingMode`, we can get the possible enum values available for that enum class using 

    .. code-block:: matlab
        
        disp(getEnumNames('VNSDK.Registers.Attitude.VpeBasicControl+HeadingMode', vnSdkAssembly))

C#
==

Requirements
************
- Windows OS
- .NET
- MSVC build generator (Not Ninja)
- MSVC compiler
- CMake

Tested Compilers / OS
*********************
The CLI SDK is continually tested on the following hardware/compiler combinations:

- Windows 11: Visual Studio 17 2022, CMake 3.22.1

Run the Getting Started Example
*******************************
The best way to validate the download, tool chain, and basic hardware compatibility is by running the GettingStarted example. This can be done on command line or through the Visual Studio IDE using the following steps:

.. tab:: Command Line

    #. Open /cs/examples/GettingStarted/ in terminal
    #. Create a new build directory and open it

       ``>> mkdir build``
    
       ``>> cd build``
    #. Configure and build the project using cmake 

       ``>> cmake -G "Visual Studio 17 2022" -S ../ -B ./``

       ``>> cmake --build ./ --config Release``
    #. Run the compiled file
    
       ``>> Release\GettingStarted.exe COM8``

       Notice you can run this file by passing the COM port as a command line argument or by hard coding the value inside the GettingStarted example file. The VectorNav USB adapter will show up in Windows as COMXX where XX is the COM port number.         

.. tab:: Visual Studio IDE

    #. In Visual Studio 2022 use "open a local folder" to open /cs/examples/GettingStarted/

        .. tip::
            To Resolve 'CMake Error: CMAKE_CSharp_COMPILER not set'

            - **Project** -> **CMake Settings**
            - **Advanced Settings**
            - Change **CMake Generator** from *Ninja* to *Visual Studio 17 2022 Win64*
            - Save CMakeSettings.json
            - Rebuild All

    #. Specify the COM port for the connected sensor - this can be done one of two ways:
        - Hard code the com port setting in the GettingStarted.cs file. 
            .. code-block:: CSharp

                String port = "COM7";

        - Supply the COM port via the command line interface. This can be done while running the debugger in the IDE by updating the **Debug and Launch Settings** for Getting Started.
            - Select **Debug** -> **Debug and Launch Settings**
            - Add or update the **args** setting with the COM port information.
                Example launch.vs.json:

                .. code-block:: json

                    {  
                        "version": "0.2.1",  
                        "defaults": {},  
                        "configurations": [  
                            {  
                            "type": "default",  
                            "project": "CMakeLists.txt",  
                            "projectTarget": "GettingStarted.exe (Debug\\GettingStarted.exe)",  
                            "name": "GettingStarted.exe (Debug\\GettingStarted.exe)",  
                            "args": ["COM7"]  
                            }  
                        ]  
                    } 

    #. Run the debugger
