
.. _program_listing_file_documentation__RegisterScan_CLI_RegisterScan.hpp:

Program Listing for File CLI_RegisterScan.hpp
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__RegisterScan_CLI_RegisterScan.hpp>` (``documentation\_RegisterScan\CLI_RegisterScan.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef __CLI_REGISTERSCAN_HPP__
   #define __CLI_REGISTERSCAN_HPP__
   
   #include "CLI_Sensor.hpp"
   
   #pragma managed(push, off)
   #include "RegisterScan.hpp"
   #pragma managed(pop)
   
   using namespace System;
   
   namespace VNSDK
   {
        class SensorConfigurator
       {
       private:
           VN::SensorConfigurator *_configurator;
   
       public:
           SensorConfigurator(Sensor& sensor, String* port)
           {
               std::string nativePortName = msclr::interop::marshal_as<std::string>(port);
   
               _configurator = new VN::SensorConfigurator(sensor->GetNativeInstance(), nativePortName);
           }
   
           ~SensorConfigurator()
           {
               delete _configurator;
           }
   
           void SaveConfiguration(String* path)
           {
               std::string unmanagedPath = msclr::interop::marshal_as<std::string>(path);
               if (_configurator->SaveConfiguration(unmanagedPath)) {
                   throw gcnew System::Exception("Register Scan save config failed");
               }
           }
   
           void LoadConfiguration(String* path)
           {
               std::string unmanagedPath = msclr::interop::marshal_as<std::string>(path);
               if (_configurator->LoadConfiguration(unmanagedPath)) {
                   throw gcnew System::Exception("Register Scan load config failed");
               }
           }
       };
   } // namespace VNSDK
   
   #endif // __CLI_REGISTERSCAN_HPP__
