
.. _program_listing_file_documentation__include_CLI_Commands.hpp:

Program Listing for File CLI_Commands.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__include_CLI_Commands.hpp>` (``documentation\_include\CLI_Commands.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef __VNCOMMANDS_HPP__
   #define __VNCOMMANDS_HPP__
   
   #include "Windows.h"
   #include <conio.h>
   #include <msclr/marshal.h>
   
   #pragma managed(push, off)
   #include "Interface/Command.hpp"
   #include "Interface/Commands.hpp"
   #pragma managed(pop)
   
   #include <string>
   
   using namespace System;
   using namespace msclr::interop;
   
   namespace VNSDK
   {
       namespace Commands
       {
   
            class Command
           {
           protected:
               VN::Command* _cmd;
   
           public:
               Command(VN::Command* cmd) : _cmd(cmd) {};
               ~Command() { delete _cmd; };
               VN::Command* GetReference() { return _cmd; };
   
               bool isAwaitingResponse()  // The command queue has NOT yet popped this command
               {
                   return _cmd->isAwaitingResponse();
               };
   
               bool hasValidResponse()    // This command has received a response that matches.
               {
                   return _cmd->hasValidResponse();
               };
   
               void getError()
               {
                   //return _cmd->getError();
               };
   
               String* getResponse()
               {
                   marshal_context* context = gcnew marshal_context();
                   String* value = context->marshal_as<String*>(_cmd->getResponse().c_str());
                   delete context;
                   return value;
   
               };
   
           };
   
            class WriteSettings : public Command
           {
           public:
               WriteSettings() : Command(new VN::WriteSettings()) {};
           };
   
            class RestoreFactorySettings : public Command
           {
           public:
               RestoreFactorySettings() : Command(new VN::RestoreFactorySettings()) {};
           };
   
            class Reset : public Command
           {
           public:
               Reset() : Command(new VN::Reset()) {};
           };
   
            class FirmwareUpdate : public Command
           {
           public:
               FirmwareUpdate() : Command(new VN::FirmwareUpdate()) {};
           };
   
            class KnownMagneticDisturbance : public Command
           {
           public:
               enum class State : uint8_t { NotPresent = 0, Present = 1 } state;
   
               KnownMagneticDisturbance(State state) : Command(new VN::KnownMagneticDisturbance(static_cast<VN::KnownMagneticDisturbance::State>(state))) {};
           };
   
            class KnownAccelerationDisturbance : public Command
           {
           public:
               enum class State : uint8_t { NotPresent = 0, Present = 1 } state;
   
               KnownAccelerationDisturbance(State state) : Command(new VN::KnownAccelerationDisturbance(static_cast<VN::KnownAccelerationDisturbance::State>(state))) {};
           };
   
            class SetInitialHeading : public Command
           {
           public:
               SetInitialHeading(float heading) : Command(new VN::SetInitialHeading(heading)) {};
           };
   
            class AsyncOutputEnable : public Command
           {
           public:
               enum class State : uint8_t { NotPresent = 0, Present = 1 } state;
   
               AsyncOutputEnable(uint8_t state) : Command(new VN::AsyncOutputEnable(static_cast<VN::AsyncOutputEnable::State>(state))) {};
           };
   
            class SetFilterBias : public Command
           {
           public:
               SetFilterBias() : Command(new VN::SetFilterBias()) {};
           };
   
            class PollBinaryOutputMessage : public Command
           {
           public:
               PollBinaryOutputMessage(uint8_t binMsgNum) : Command(new VN::PollBinaryOutputMessage(binMsgNum)) {};
           };
   
   
   
       }
   }
   
   #endif //__VNCOMMANDS_HPP__
   
